---
- name: Create main project directory
  file: state=directory path=${project.root} owner=${project.user} group=${project.user} mode=0755

- name: Create project directories
  file: state=directory path=${project.root}/${item.name}/ owner=${project.user} group=${project.user} mode=${item.mode}
  with_items:
    - { "name": "logs", "mode": "0755"}
    - { "name": "virtualenv", "mode": "0755"}
    - { "name": "configs", "mode": "0755"}
    - { "name": "private", "mode": "0511"}
    - { "name": "static", "mode": "0755"}
    - { "name": "uploads", "mode": "0755"}

- name: Install webserver files
  copy: src=${project.environment}/${item} dest=${project.root}/private/${item} owner=${project.www_user} group=${project.www_group} mode=0400
  with_items:
    - htpasswd-admin
    - localhost.crt
    - localhost.key

- name: Install private files
  copy: src=${project.environment}/${item} dest=${project.root}/private/${item} owner=${project.user} group=${project.user} mode=0400
  with_items:
    - ca.crt
    - client.crt
    - client.key
    - client_secrets.json
  notify:
    - touch uwsgi deployment file

- name: Install templatized config files
  action: template src=${item.src} dest=${item.dest} owner=${item.owner} group=${item.group}
  with_items:
    - { "src": "settings.py.j2", "dest": "${project.root}/configs/settings.py", "owner": "${project.user}", "group": "${project.user}" }
    - { "src": "wsgi.py.j2", "dest": "${project.root}/configs/wsgi.py", "owner": "${project.user}", "group": "${project.user}" }
    - { "src": "uwsgi_params.j2", "dest": "${project.root}/configs/uwsgi_params", "owner": "${project.www_user}", "group": "${project.www_group}" }
    - { "src": "nginx.conf.j2", "dest": "${project.root}/configs/nginx.conf", "owner": "root", "group": "root" }
    - { "src": "supervisor.conf.j2", "dest": "${project.root}/configs/supervisor.conf", "owner": "root", "group": "root" }
    - { "src": "uwsgi.ini.j2", "dest": "${project.root}/configs/uwsgi.ini", "owner": "${project.user}", "group": "${project.user}" }
  notify:
    - reload supervisor
    - reload nginx
    - touch uwsgi deployment file

- name: Pull source from the repository
  git: repo=${project.repo} dest=${project.root}/code/ version=${project.revision} update=yes force=yes
  notify:
    - reload supervisor
    - touch uwsgi deployment file

- name: Symlink configs
  file: src=${item.src} dest=${item.dest} state=link force=yes
  with_items:
    - { "src": "${project.root}/configs/supervisor.conf", "dest": "/etc/supervisor/conf.d/${project.name}.conf" }
    - { "src": "${project.root}/configs/nginx.conf", "dest": "/etc/nginx/conf.d/mailytics.conf" }
    - { "src": "${project.root}/configs/settings.py", "dest": "${project.root}/code/mailytics/configs/local_settings.py" }
    - { "src": "${project.root}/configs/wsgi.py", "dest": "${project.root}/code/mailytics/configs/wsgi.py" }

- name: Install requirements
  pip: requirements=${project.root}/code/requirements.txt virtualenv=${project.root}/virtualenv

- name: Install Node.js dependencies
  #sudo_user: ${project.user}
  shell: npm install chdir=${project.root}/code/

- name: Collect static files
  shell: ${project.root}/virtualenv/bin/python ${project.root}/code/mailytics/manage.py collectstatic --noinput
  environment:
    DJANGO_SETTINGS_MODULE: "${project.settings_module}"
    PYTHONPATH: "/data-deploy/mailytics-token-storage/code/"

- name: Sync database
  shell: ${project.root}/virtualenv/bin/python ${project.root}/code/mailytics/manage.py syncdb --noinput
  environment:
    DJANGO_SETTINGS_MODULE: "${project.settings_module}"
    PYTHONPATH: "/data-deploy/mailytics-token-storage/code/"

- name: Migrate database
  shell: ${project.root}/virtualenv/bin/python ${project.root}/code/mailytics/manage.py migrate --noinput
  environment:
    DJANGO_SETTINGS_MODULE: "${project.settings_module}"
    PYTHONPATH: "/data-deploy/mailytics-token-storage/code/"
