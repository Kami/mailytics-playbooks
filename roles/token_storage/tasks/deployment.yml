---
- name: Create main project directory
  file: state=directory path=${project.root} owner=${project.user} group=${project.user} mode=0755

- name: Create project directories
  file: state=directory path=${project.root}/${item.name}/ owner=${project.user} group=${project.user} mode=${item.mode}
  with_items:
    - { "name": "logs", "mode": "0755"}
    - { "name": "virtualenv", "mode": "0755"}
    - { "name": "configs", "mode": "0755"}
    - { "name": "data", "mode": "0711"}
    - { "name": "backups", "mode": "0711"}
    - { "name": "private", "mode": "0511"}
    - { "name": "private/private_keys/", "mode": "0511"}

- name: Pull source from the repository
  git: repo=${project.repo} dest=${project.root}/code/ version=${project.revision} update=yes force=yes
  notify:
    - reload supervisor
    - restart token storage set service
    - restart token storage get service

- name: Install requirements
  pip: requirements=${project.root}/code/requirements.txt virtualenv=${project.root}/virtualenv

- name: Create database backup
  shell: "${project.root}/code/scripts/backup-database.sh ${project.root}/data/database.sqlite ${project.root}/backups/backup-$(date +%s).sqlite"

- name: Delete old backups (keep last 5)
  shell: "ls -dt ${project.root}/backups/* | tail -n +6 | xargs rm -rf"

- name: Make sure database file exists
  shell: ${project.root}/code/scripts/create-schema.sh ${project.root}/data/database.sqlite
  notify:
    - reload supervisor
    - restart token storage set service
    - restart token storage get service

- name: Make sure database file is only readable & writable by owner
  file: path=${project.root}/data/database.sqlite owner=${project.user} group=${project.user} mode=0700

- name: List backup files
  shell: ls -1 ${project.root}/backups/*
  register: backup_files

- name: Make sure backups are only readable by the owner
  file: path=${item} owner=${project.user} group=${project.user} mode=0400
  with_items: ${backup_files.stdout_lines}

- name: Install private files
  copy: src=${project.environment}/${item} dest=${project.root}/private/${item} owner=${project.user} group=${project.user} mode=0400
  with_items:
    - ca.crt
    - server.crt
    - server.key
    - private_keys/meta
    - private_keys/1
  notify:
    - reload supervisor
    - restart token storage set service
    - restart token storage get service

- name: Install templatized config files
  action: template src=${item.src} dest=${item.dest} owner=${item.owner} group=${item.group}
  with_items:
    - { "src": "supervisor.conf.j2", "dest": "${project.root}/configs/supervisor.conf", "owner": "root", "group": "root" }
  notify:
    - reload supervisor
    - restart token storage set service
    - restart token storage get service

- name: Symlink configs
  file: src=${item.src} dest=${item.dest} state=link force=yes
  with_items:
    - { "src": "${project.root}/configs/supervisor.conf", "dest": "/etc/supervisor/conf.d/${project.name}.conf" }
